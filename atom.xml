<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://spark-wz.github.io</id>
    <title>Gridea</title>
    <updated>2021-07-16T06:57:29.910Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://spark-wz.github.io"/>
    <link rel="self" href="https://spark-wz.github.io/atom.xml"/>
    <logo>https://spark-wz.github.io/images/avatar.png</logo>
    <icon>https://spark-wz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[SpringCloud熔断器]]></title>
        <id>https://spark-wz.github.io/post/springcloud-rong-duan-qi</id>
        <link href="https://spark-wz.github.io/post/springcloud-rong-duan-qi">
        </link>
        <updated>2021-07-16T06:20:21.000Z</updated>
        <content type="html"><![CDATA[<p>添加依赖（熔断器）</p>
<pre><code>  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;
    &lt;/dependency&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二进制运算]]></title>
        <id>https://spark-wz.github.io/post/er-jin-zhi-yun-suan</id>
        <link href="https://spark-wz.github.io/post/er-jin-zhi-yun-suan">
        </link>
        <updated>2021-07-15T09:37:14.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1-按位与">1. 按位与（&amp;）</h4>
<p>按位与运算为：两位全为1，结果为1，即1&amp;1=1，1&amp;0=0，0&amp;1=0，0&amp;0=0。<br>
例如51 &amp; 5 -&gt; 00110011 &amp; 00000101 = 00000001 -&gt; 51 &amp; 5 = 1<br>
<strong>特殊用法</strong>：<br>
（1）与0相与可清零。<br>
（2）与1相与可保留原值，可从一个数中取某些位。例如需要取10101110中的低四位，10101110 &amp; 00001111 = 00001110，即得到所需结果。</p>
<h4 id="2-按位或">2. 按位或（|）</h4>
<p>两位只要有一位为1，结果则为1，即1|1=1，1|0=1，0|1=1，0|0=0。<br>
<strong>特殊用法</strong>：<br>
（1）与0相或可保留原值。<br>
（2）与1相或可将对应位置1。例如，将X=10100000的低四位置1，使X | 00001111 = 10101111即可。</p>
<h4 id="3-异或运算">3. 异或运算（^）</h4>
<p>两位为“异”，即一位为1一位为0，则结果为1，否则为0。即1<sup>1=1，1</sup>0=0，0<sup>1=0，0</sup>0=1。<br>
<strong>特殊用法</strong>：<br>
（1）使指定位翻转：找一个数，对应X要翻转的各位为1，其余为0，使其与X进行异或运算即可。例如，X=10101110，使低四位翻转，X ^ 00001111 = 10100001。<br>
（2）与0相异或保留原值。例如X ^ 00000000 = 10101110。<br>
（3）交换两变量的值。（比借助容器法、加减法效率高）原理：一个数对同一个数连续两次进行异或运算，结果与这个数相等。<br>
因此，交换方法为：A = A ^ B，B = A ^ B，A = A ^ B。</p>
<h4 id="4-取反~">4. 取反（~）</h4>
<p>将一个数按位取反，即~ 0 = 1，~ 1 = 0。</p>
<h4 id="5-左移">5. 左移（&lt;&lt;）</h4>
<p>将一个数左移x位，即左边丢弃x位，右边用0补x位。例：11100111 &lt;&lt; 2 = 10011100。<br>
<strong>拓展</strong>：<br>
<mark>原码</mark>：一个整数按照绝对值大小转换为二进制即为原码；<br>
<mark>反码</mark>：将二进制数按位取反，得到的即为反码；<br>
<mark>补码</mark>：反码加1即为补码。<br>
<mark>由于计算机底层硬件的限制，负数均使用补码表示。</mark><br>
若左移时舍弃的高位全为0，则每左移1位，相当于该数十进制时乘一次2。</p>
<p>例：11(1011) &lt;&lt; 2 = 44（11表示为1011时实际上不完整，若计算机中规定整型的大小为32bit，则11的完整二进制形式为00000000 00000000 0000000 00001011）</p>
<h4 id="6-右移">6. 右移（&gt;&gt;）</h4>
<p>将一个数右移若干位，右边舍弃，正数左边补0，负数左边补1。每右移一位，相当于除以一次2。<br>
例：4 &gt;&gt; 2 = 1，-14 &gt;&gt; 2 = -4。</p>
<h4 id="7-无符号右移">7. 无符号右移（&gt;&gt;&gt;）</h4>
<p>将一个数右移若干位，左边补0，右边舍弃。<br>
例：-14 &gt;&gt;&gt; 2 = (11111111 11111111 11111111 11110010) &gt;&gt;&gt; 2 = (00111111 11111111 11111111 11111100) = 1073741820<br>
<img src="https://spark-wz.github.io/post-images/1626343682637.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringCloud ZUUL网关]]></title>
        <id>https://spark-wz.github.io/post/springcloud-zuul</id>
        <link href="https://spark-wz.github.io/post/springcloud-zuul">
        </link>
        <updated>2021-07-15T05:13:21.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>新建模块，和server、client同级</li>
<li>启动类添加两个注解</li>
<li><img src="https://spark-wz.github.io/post-images/1626336765502.png" alt=""></li>
</ul>
<h1 id="配置yml文件">* <strong>配置yml文件</strong></h1>
<p>server:<br>
port: 9000//网关端口<br>
spring:<br>
application:<br>
name: zuul//网关名称</p>
<p>eureka:<br>
client:<br>
service-url:<br>
defaultZone: http://localhost:8699/eureka/ #当前zuul网关想要注册到哪个注册中心这里注册到之前搭的9000上。</p>
<p>#路由规则定义。这里定义两种路由规则route1和route2<br>
#，代表访问网关/test01/**或/test02/<strong>时。<br>
#路由到服务名为 eurekaservice1或 eureka<br>
#service2中的服务集群去。<br>
zuul:<br>
routes:<br>
route1:<br>
path: /Controller/</strong><br>
serviceId: eureka-service//application name<br>
<strong>zuul会自动将应用名为“eureka-service”的服务负载均衡</strong></p>
<h1 id="route2">route2:</h1>
<h1 id="path-test02">path: /test02/**</h1>
<h1 id="serviceid-eureka-service2">serviceId: eureka-service2</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpringCloud]]></title>
        <id>https://spark-wz.github.io/post/springcloud</id>
        <link href="https://spark-wz.github.io/post/springcloud">
        </link>
        <updated>2021-07-08T09:28:43.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://spark-wz.github.io/post-images/1625812367244.png" alt=""></p>
<ul>
<li>创建一个空项目，配置maven</li>
</ul>
<h3 id="创建一个新模块server端">创建一个新模块（server端）</h3>
<ul>
<li>file→new→module→maven</li>
<li>配置SDK,勾选 Create from archetype<br>
<img src="https://spark-wz.github.io/post-images/1625736910655.png" alt=""></li>
<li>选择quickstart</li>
</ul>
<h3 id="添加依赖">添加依赖</h3>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
 
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
 
  &lt;groupId&gt;com.yun&lt;/groupId&gt;
  &lt;artifactId&gt;springcloud-eureka-server&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
 
  &lt;name&gt;springcloud-eureka-server&lt;/name&gt;
  &lt;!-- FIXME change it to the project's website --&gt;
  &lt;url&gt;http://www.example.com&lt;/url&gt;
 
  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
  &lt;/properties&gt;
 
  &lt;!--引入springboot-parent父项目--&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;
  &lt;/parent&gt;
 
  &lt;dependencies&gt;
    &lt;!--引入springcloud的euekea server依赖--&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
    &lt;/dependency&gt;
 
  &lt;/dependencies&gt;
 
 
  &lt;!--指定下载源和使用springcloud的版本--&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
        &lt;version&gt;Edgware.SR5&lt;/version&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;scope&gt;import&lt;/scope&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
&lt;/project&gt;
</code></pre>
<h3 id="新建yml文件并配置">新建yml文件，并配置</h3>
<pre><code>server:
  port: 8700 # 端口自己决定
  
# 指定当前eureka客户端的注册地址，也就是eureka服务的提供方，当前配置的服务的注册服务方
eureka:
  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka
    register-with-eureka: false #自身 不在向eureka注册
    fetch-registry: false  #启动时禁用client的注册
  instance:
    hostname: localhost
 
#指定应用名称
spring:
  application:
    name: eureka-server
</code></pre>
<h3 id="配置启动类运行启动类就可以访问管理界面了">配置启动类（运行启动类，就可以访问管理界面了）</h3>
<p><strong>访问路径 localhost:8700</strong></p>
<pre><code>package com.yun;
 
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
 
@SpringBootApplication
@EnableEurekaServer //当前使用eureka的server
public class EurekaServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(EurekaServerApplication.class,args);
    }
}
</code></pre>
<h3 id="创建新模块client">创建新模块（client）</h3>
<p><strong>客户端client  提供真正服务的角色的配置， 它提供服务 在 服务注册方server （注册中心）进行注册</strong></p>
<ul>
<li>同样新建module，选择quickstart点击下一步</li>
<li>新建yml文件，并配置</li>
</ul>
<pre><code>server:
  port: 8701 # 服务提供方
 
# 指定当前eureka客户端的注册地址,
eureka:
  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:8700/eureka
  instance:
    hostname: localhost
 
#当前服务名称
spring:
  application:
    name: eureka-service
</code></pre>
<h3 id="添加依赖-2">添加依赖</h3>
<pre><code>&lt;!--引入springboot-parent父项目--&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;
  &lt;/parent&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;4.11&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;


    &lt;!--引入springcloud的euekea client依赖--&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
    &lt;/dependency&gt;

  &lt;/dependencies&gt;


  &lt;!--指定下载源和使用springcloud的版本--&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
        &lt;version&gt;Edgware.SR5&lt;/version&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;scope&gt;import&lt;/scope&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
</code></pre>
<h3 id="配置启动类">配置启动类</h3>
<pre><code>package com.yun;
 
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
 
@SpringBootApplication
@EnableDiscoveryClient//代表自己是一个服务提供方
public class EurekaServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(EurekaServiceApplication.class,args);
    }
}
</code></pre>
<h3 id="新建controller写测试接口testcontroller">新建controller，写测试接口（TestController）</h3>
<pre><code>package com.unicorn.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * @author spark
 * @date 2021/7/8
 */
@RestController
@RequestMapping(&quot;/Hello&quot;)
public class TestController {
    @RequestMapping(&quot;/World&quot;)
    public String helloWorld(String s){
        System.out.println(&quot;传入的值为：&quot;+s);
        return &quot;传入的值为：&quot;+s;
    }
}
</code></pre>
<ul>
<li><strong>运行启动类</strong></li>
<li><strong>此时再进入服务注册的页面 http://localhost:8700/，可以看见服务提供者已被注册进 服务注册者</strong><br>
<img src="https://spark-wz.github.io/post-images/1625737665960.png" alt=""></li>
<li><strong>在直接访问一下服务提供者的 网络位置http://localhost:8701/Hello/World?s=小沛打印 可以访问了，证明此微服务可用。</strong></li>
<li><img src="https://spark-wz.github.io/post-images/1625737735206.png" alt=""></li>
</ul>
<h3 id="resttemplateribbon">restTemplate+ribbon</h3>
<p><strong>ribbon是一种负载均衡的客户端</strong></p>
<ul>
<li>同样新建module，选择quickstart点击下一步</li>
<li>配置yml文件，服务的消费方依旧需要在注册方8700端口去注册。配置当前服务消费方的端口8072，名字为eureka-consumer</li>
</ul>
<pre><code>server:
  port: 8702 # 服务消费方
 
# 指定当前eureka客户端的注册地址,
eureka:
  client:
    service-url:
      defaultZone: http://${eureka.instance.hostname}:8700/eureka
  instance:
    hostname: localhost
 
#当前服务名称
spring:
  application:
    name: eureka-consumer
</code></pre>
<h3 id="添加依赖-3">添加依赖</h3>
<pre><code>&lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit&lt;/artifactId&gt;
            &lt;version&gt;4.11&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;


        &lt;!--引入bibbon依赖--&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;!--指定下载源和使用springcloud的版本--&gt;
    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
                &lt;version&gt;Edgware.SR5&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;
</code></pre>
<h3 id="配置启动类-2">配置启动类</h3>
<pre><code>package com.yun;
 
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
 
 
@SpringBootApplication
@EnableDiscoveryClient //当前使用eureka的server
public class EurekaConsumerApplication {
    public static void main(String[] args) {
        SpringApplication.run(EurekaConsumerApplication.class,args);
    }
}
</code></pre>
<h3 id="新建测试接口">新建测试接口</h3>
<pre><code>package com.unicorn.controller;

/**
 * @author spark
 * @date 2021/7/8
 */

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@RequestMapping(&quot;/Hello&quot;)
class ConsumerController {
    @Autowired
    private LoadBalancerClient loadBalancerClient;
    @Autowired
    private RestTemplate restTemplate;

    @RequestMapping(&quot;/Consumer&quot;)
    public String helloWorld(String s){
        System.out.println(&quot;传入的值为：&quot;+s);
        //第一种调用方式
        //String forObject = new RestTemplate().getForObject(&quot;http://localhost:8071/Hello/World?s=&quot; + s, String.class);

        //第二种调用方式
        //根据服务名 获取服务列表 根据算法选取某个服务 并访问某个服务的网络位置。
        //ServiceInstance serviceInstance = loadBalancerClient.choose(&quot;EUREKA-SERVICE&quot;);
        //String forObject = new RestTemplate().getForObject(&quot;http://&quot;+serviceInstance.getHost()+&quot;:&quot;+serviceInstance.getPort()+&quot;/Hello/World?s=&quot;+s,String.class);

        //第三种调用方式 需要restTemplate注入的方式
        String forObject = restTemplate.getForObject(&quot;http://EUREKA-SERVICE/Hello/World?s=&quot; + s, String.class);
        return forObject;
    }
}

</code></pre>
<p>我们常用第三种调用方式。</p>
<p>第一种是直接调用：不经过注册中心那服务列表，直接访问的servicesupport</p>
<p>第二种：是根据服务名选择调用，如上图需要做如下注入</p>
<pre><code>@Autowired
private LoadBalancerClient loadBalancerClient;
</code></pre>
<p>如上图代码中第二种调用方法的代码所示。</p>
<p>用服务名去注册中心获取服务列表，当前客户端底层会做随机算法的选取获得服务并访问。</p>
<p>第三种需要一个@Bean的注解自动注入并直接调用restTemplate对象调用服务。底层调用模式与第二种调用方式一样。如下：</p>
<pre><code>package com.yun.beans;
 
import org.springframework.cloud.client.loadbalancer.LoadBalanced;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;
 
@Configuration
public class Beans {
    //管理简单对象
    @Bean
    @LoadBalanced
    public RestTemplate getRestTemplate(){
        return new RestTemplate();
    }
}
</code></pre>
<p>@Bean注解告诉工厂，这个方法需要自动注入。</p>
<p>@LoadBalanced，表示需要做负载匀衡。</p>
<p>然后如controller中一样注入一下restTemplate，并且使用他，区别是可以直接使用服务名访问了</p>
<h3 id="测试">测试</h3>
<ul>
<li>启动server端、client端、consumer端。访问：http://localhost:8702/Hello/Consumer?s=%E5%B0%8F%E6%B2%9B</li>
<li>返回：传入的值为：小沛</li>
</ul>
<h3 id="eureka-server的高可用配置">Eureka server的高可用配置</h3>
<p><strong>编辑配置</strong><br>
<img src="https://spark-wz.github.io/post-images/1625738239131.png" alt=""></p>
<ul>
<li>点击server启动类，点击复制<br>
<img src="https://spark-wz.github.io/post-images/1625738303287.png" alt=""></li>
<li>填写配置<br>
<img src="https://spark-wz.github.io/post-images/1625738367243.png" alt=""></li>
<li>复制三个启动类，端口分别为6699、6698、6697</li>
<li>分别改注册端口号，defaultZone分别启动三个启动项</li>
<li>打开server的yml配置</li>
</ul>
<pre><code># 指定当前eureka客户端的注册地址，也就是eureka服务的提供方，当前配置的服务的注册服务方
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8699/eureka,http://localhost:8698/eureka
    register-with-eureka: false #自身 不在向eureka注册
    fetch-registry: false  #启动时禁用client的注册
  instance:
    hostname: localhost

#指定应用名称
spring:
  application:
    name: eureka-server
</code></pre>
<ul>
<li>当配置为99、98端口时，启动端口为97的启动类，其他同理，将刚刚复制的三个启动类分别启动</li>
<li>此时访问localhost:8899或8898或8897就都可以访问管理中心了</li>
<li>将client端yml配置中注册的端口改为8899，再次访问</li>
<li>即使服务提供方只注册了一个端口号8699，但是另外两个端口号，也能感知到服务提供方8701的存在了</li>
<li>向服务消费方中添加服务注册者的端口号，这样在server挂掉任何一个的时候，都能有其他的server也能获取服务列表</li>
</ul>
<pre><code>server:
  port: 8702 # 服务消费方

# 指定当前eureka客户端的注册地址,
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8699/eureka,http://localhost:8698/eureka,http://localhost:8697/eureka
  instance:
    hostname: localhost

#当前服务名称
spring:
  application:
    name: eureka-consumer
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java集成milo]]></title>
        <id>https://spark-wz.github.io/post/java-ji-cheng-milo</id>
        <link href="https://spark-wz.github.io/post/java-ji-cheng-milo">
        </link>
        <updated>2021-07-06T08:19:42.000Z</updated>
        <content type="html"><![CDATA[<p>引入依赖</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[干燥工作内容]]></title>
        <id>https://spark-wz.github.io/post/gan-zao-gong-zuo-nei-rong</id>
        <link href="https://spark-wz.github.io/post/gan-zao-gong-zuo-nei-rong">
        </link>
        <updated>2021-06-30T08:49:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="业务">业务</h2>
<ul>
<li>整体急停、恢复，单个设备启停（写入一个接口）</li>
<li>设备运行状态（将数据存入taos、查询设备运行状态复用之前接口）</li>
<li>任务列表</li>
<li>告警（液位高低限、写死）、plc通讯故障</li>
</ul>
<h2 id="逻辑控制">逻辑控制</h2>
<h4 id="进料">进料</h4>
<ul>
<li>进料阀门、搅拌电机都为手动控制</li>
<li>当液位高于设定液位高限时，判定进料阀门状态，关闭阀门状态为开启的阀门</li>
<li>当液位高于设定液位低限时，且搅拌电机处于工作状态，关闭搅拌电机</li>
</ul>
<h4 id="向100l罐送料">向100L罐送料</h4>
<ul>
<li>100L罐低于低限（搅拌电机处于开启状态时，停止搅拌电机）、且400L罐高于低限时，开启阀门</li>
<li>100L罐高于低限、或400L罐低于低限时，停止阀门</li>
</ul>
<h2 id="任务">任务</h2>
<ul>
<li>料进入400L储料罐</li>
<li>400L储料罐往3个100L原料罐打料</li>
<li>反冲水</li>
<li>400L罐/3个100L罐往离心机打料</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[溧水文档]]></title>
        <id>https://spark-wz.github.io/post/li-shui-wen-dang</id>
        <link href="https://spark-wz.github.io/post/li-shui-wen-dang">
        </link>
        <updated>2021-06-23T01:28:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="服务器">服务器</h2>
<p>用户名：root<br>
密码：123@QWEqwe<br>
ip：192.168.1.185</p>
<h2 id="中央plc">中央plc</h2>
<p>ip：192.168.1.230</p>
<h2 id="配料plc">配料plc</h2>
<p>ip: 192.168.1.220</p>
<h2 id="反应釜plc">反应釜plc</h2>
<p>ip 192.168.1.240</p>
<h2 id="有人串口服务器">有人串口服务器</h2>
<p>ip 192.168.1.7</p>
<h2 id="mysql">MySQL</h2>
<p>用户名：root<br>
密码：123@qweQWE<br>
数据库：industrial_intelligence</p>
<h2 id="nginx">NGINX</h2>
<p>配置文件地址：/usr/local/nginx/conf/nginx.conf<br>
启动命令：/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</p>
<h2 id="redis">Redis</h2>
<p>后台启动命令：<br>
cd /usr/local/redis/redis-3.2.12/src<br>
./redis-server ../redis.conf</p>
<h2 id="自启动脚本地址">自启动脚本地址</h2>
<p>/etc/rc.d/init.d/startup.sh</p>
<h2 id="mes系统">mes系统</h2>
<p>jar包位置： /root/mes<br>
启jar包命令：nohup java -jar mes-controller-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &gt;&gt;catalina.out 2&gt;&amp;1 &amp;<br>
dist位置：/root/mes/dist</p>
<h2 id="配料系统">配料系统</h2>
<p>jar包位置： /root/supply-controller<br>
启jar包命令：nohup java -jar jeecg-boot-module-system-2.1.4.jar --spring.profiles.active=prod &gt;&gt;catalina.out 2&gt;&amp;1 &amp;<br>
dist位置：/root/supply-controller/dist</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux修改时区]]></title>
        <id>https://spark-wz.github.io/post/linux-xiu-gai-shi-qu</id>
        <link href="https://spark-wz.github.io/post/linux-xiu-gai-shi-qu">
        </link>
        <updated>2021-06-21T00:53:47.000Z</updated>
        <content type="html"><![CDATA[<p>mv /etc/localtime /etc/localtime.bak<br>
ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/locaktime</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[navicat导出表结构]]></title>
        <id>https://spark-wz.github.io/post/navicat-dao-chu-biao-jie-gou</id>
        <link href="https://spark-wz.github.io/post/navicat-dao-chu-biao-jie-gou">
        </link>
        <updated>2021-05-22T06:44:36.000Z</updated>
        <content type="html"><![CDATA[<p>SELECT<br>
COLUMN_NAME 列名,<br>
COLUMN_TYPE 数据类型,<br>
DATA_TYPE 字段类型,<br>
CHARACTER_MAXIMUM_LENGTH 长度,<br>
IS_NULLABLE 是否为空,<br>
-- COLUMN_DEFAULT 默认值,<br>
COLUMN_COMMENT 备注<br>
FROM<br>
INFORMATION_SCHEMA. COLUMNS<br>
WHERE<br>
-- sxepp为数据库名称，到时候只需要修改成你要导出表结构的数据库即可<br>
table_schema = 'industrial_intelligence'<br>
AND -- sx_jc_car为表名，到时候换成你要导出的表的名称<br>
-- 如果不写的话，默认会查询出所有表中的数据，这样可能就分不清到底哪些字段是哪张表中的了，所以还是建议写上要导出的名名称<br>
table_name = 'cobalt'</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PLC文档]]></title>
        <id>https://spark-wz.github.io/post/plc-wen-dang</id>
        <link href="https://spark-wz.github.io/post/plc-wen-dang">
        </link>
        <updated>2021-05-16T02:00:23.000Z</updated>
        <content type="html"><![CDATA[<p><strong>准备连接</strong><br>
S7Client s7Client = new S7Client();<br>
<strong>连接参数  机器的ip,机器的机架号 ,插槽号</strong><br>
s7Client.ConnectTo(&quot;192.168.2.15&quot;, 0, 1);</p>
<h2 id="plc批量写入">PLC批量写入</h2>
<p>批量写入plc<br>
写入plc的第一条数据为byte数组中的第0位，byte数组写入位置间隔为plc各数据之间的偏移量间隔，若想间隔插入、必须在byte数据中留出与plc各数据之间的偏移量间隔</p>
<pre><code>		`
    byte[] bytes = new byte[64];
    //short对应plc中的int，每一个数据占两位，pos为数组中的位置、value为写入值
    S7.SetShortAt(bytes,0,56);
    S7.SetShortAt(bytes,2,54);
    S7.SetShortAt(bytes,4,58);
    //float对应plc中的real，每一个数据占4位，pos为数组中的位置、value为写入值
    S7.SetFloatAt(bytes,6,(float) 10.5);
    S7.SetFloatAt(bytes,10,(float) 10.5);
    S7.SetFloatAt(bytes,14,(float) 10.5);
    //bit对应plc中的bool，每一个数据占1位，pos为数组中的位置、bit为当前字节的位数，因为一个bool对应一个字节中的一位、value为写入值
    S7.SetBitAt(bytes,18,0,true);
    S7.SetShortAt(bytes,20,61);
    //参数第一个为读写区域，DB为S7.S7AreaDB=132、读写区域AO、DO 为130、读写区域AI、DI 为129
    //DBNumber第二个参数为DB号、读取区域为130、129时，第二个参数无作用
    //start第三个参数为写入数据的起始位、为写入plc第一条数据的偏移量
    //amount第四个参数为写入数据的位数、目前测定最大为22位
    //bytes第5个参数为要写入的byte数组
    int i = s7Client.WriteArea(S7.S7AreaDB, 25, 2, 22, bytes);
				`
</code></pre>
<h2 id="plc批量读取">PLC批量读取</h2>
<pre><code>			`
    S7Client s7Client = new S7Client();
    //连接参数  机器的ip,机器的机架号 ,插槽号
    s7Client.ConnectTo(&quot;192.168.2.15&quot;, 0, 1);
    System.out.println(&quot;s7Client.Connected = &quot; + s7Client.Connected);
    byte[] bytes = new byte[64];
    int i = s7Client.ReadArea(S7.S7AreaDB,25,2,22,bytes);
    System.out.println(&quot;i = &quot; + i);
    System.out.println(&quot;S7.GetShortAt(bytes,0) = &quot; + S7.GetShortAt(bytes,0));
    System.out.println(&quot;S7.GetShortAt(bytes,2) = &quot; + S7.GetShortAt(bytes,2));
    System.out.println(&quot;bytes = &quot; + S7.GetShortAt(bytes,4));
    System.out.println(&quot;S7.GetFloatAt(bytes,6) = &quot; + S7.GetFloatAt(bytes,6));
    System.out.println(&quot;S7.GetFloatAt(bytes,10) = &quot; + S7.GetFloatAt(bytes,10));
    System.out.println(&quot;S7.GetFloatAt(bytes,14) = &quot; + S7.GetFloatAt(bytes,14));
    System.out.println(&quot;S7.GetBitAt(bytes,18,0) = &quot; + S7.GetBitAt(bytes,18,0));
    System.out.println(&quot;S7.GetShortAt(bytes,20) = &quot; + S7.GetShortAt(bytes,20));
		
`
</code></pre>
]]></content>
    </entry>
</feed>