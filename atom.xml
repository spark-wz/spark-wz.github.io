<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://spark-wz.github.io</id>
    <title>Gridea</title>
    <updated>2021-06-29T01:45:29.179Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://spark-wz.github.io"/>
    <link rel="self" href="https://spark-wz.github.io/atom.xml"/>
    <logo>https://spark-wz.github.io/images/avatar.png</logo>
    <icon>https://spark-wz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[溧水文档]]></title>
        <id>https://spark-wz.github.io/post/li-shui-wen-dang</id>
        <link href="https://spark-wz.github.io/post/li-shui-wen-dang">
        </link>
        <updated>2021-06-23T01:28:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="服务器">服务器</h2>
<p>用户名：root<br>
密码：123@QWEqwe<br>
ip：192.168.1.185</p>
<h2 id="中央plc">中央plc</h2>
<p>ip：192.168.1.230</p>
<h2 id="配料plc">配料plc</h2>
<p>ip: 192.168.1.220</p>
<h2 id="反应釜plc">反应釜plc</h2>
<p>ip 192.168.1.240</p>
<h2 id="有人串口服务器">有人串口服务器</h2>
<p>ip 192.168.1.7</p>
<h2 id="mysql">MySQL</h2>
<p>用户名：root<br>
密码：123@qweQWE<br>
数据库：industrial_intelligence</p>
<h2 id="nginx">NGINX</h2>
<p>配置文件地址：/usr/local/nginx/conf/nginx.conf<br>
启动命令：/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</p>
<h2 id="redis">Redis</h2>
<p>后台启动命令：<br>
cd /usr/local/redis/redis-3.2.12/src<br>
./redis-server ../redis.conf</p>
<h2 id="自启动脚本地址">自启动脚本地址</h2>
<p>/etc/rc.d/init.d/startup.sh</p>
<h2 id="mes系统">mes系统</h2>
<p>jar包位置： /root/mes<br>
启jar包命令：nohup java -jar mes-controller-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &gt;&gt;catalina.out 2&gt;&amp;1 &amp;<br>
dist位置：/root/mes/dist</p>
<h2 id="配料系统">配料系统</h2>
<p>jar包位置： /root/supply-controller<br>
启jar包命令：nohup java -jar jeecg-boot-module-system-2.1.4.jar --spring.profiles.active=prod &gt;&gt;catalina.out 2&gt;&amp;1 &amp;<br>
dist位置：/root/supply-controller/dist</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux修改时区]]></title>
        <id>https://spark-wz.github.io/post/linux-xiu-gai-shi-qu</id>
        <link href="https://spark-wz.github.io/post/linux-xiu-gai-shi-qu">
        </link>
        <updated>2021-06-21T00:53:47.000Z</updated>
        <content type="html"><![CDATA[<p>mv /etc/localtime /etc/localtime.bak<br>
ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/locaktime</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电量统计]]></title>
        <id>https://spark-wz.github.io/post/dian-liang-tong-ji</id>
        <link href="https://spark-wz.github.io/post/dian-liang-tong-ji">
        </link>
        <updated>2021-06-20T15:05:23.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>每天0.00获取各子系统实时耗电量，将获得的数据 根据系统获取时间（星期几）、子系统名称存至耗电量统计表（electricity_statistics）；当今天为周一时，删除各子系统周二至周日的耗电量统计。</li>
<li>每隔30分钟统计各子系统的实时电量，用当前系统实时耗电量   -   0.00系统实时耗电量   =  当日实时耗电量；将得到的数据根据系统获取时间（星期几）、子系统名称存至耗电量统计表（electricity_statistics）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据单位]]></title>
        <id>https://spark-wz.github.io/post/shu-ju-dan-wei</id>
        <link href="https://spark-wz.github.io/post/shu-ju-dan-wei">
        </link>
        <updated>2021-06-19T08:41:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="能源动力">能源动力</h2>
<ul>
<li>压力值单位MPa</li>
<li>流量m³/h</li>
<li>温度℃</li>
</ul>
<h2 id="高纯硼">高纯硼</h2>
<ul>
<li>流量单位m³/h</li>
<li>压力值单位MPa</li>
<li>温度℃</li>
<li>液位L</li>
</ul>
<h2 id="钴基">钴基</h2>
<ul>
<li>总进水压力值、气源压力、喷盘压力、气源压力MPa</li>
<li>其他压力值KPa</li>
<li>功率KW</li>
<li>温度℃</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[剩余任务]]></title>
        <id>https://spark-wz.github.io/post/sheng-yu-ren-wu</id>
        <link href="https://spark-wz.github.io/post/sheng-yu-ren-wu">
        </link>
        <updated>2021-06-09T12:03:03.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>各子系统表内设备总数、运行数量、空闲数量、故障数量、物流信息</li>
<li>各系统实时耗电量统计</li>
<li>周一到周日的耗电量统计</li>
<li>工厂整体表的各系统总数量、空闲、运行、故障数量；各系统对应的<strong>运行、空闲、故障状态</strong></li>
<li>各系统故障信息统计</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[子系统表名]]></title>
        <id>https://spark-wz.github.io/post/zi-xi-tong-biao-ming</id>
        <link href="https://spark-wz.github.io/post/zi-xi-tong-biao-ming">
        </link>
        <updated>2021-06-07T08:54:44.000Z</updated>
        <content type="html"><![CDATA[<p><strong>batching配料系统</strong><br>
<strong>compressor氮气压缩机</strong><br>
<strong>nitrogen氮气</strong><br>
<strong>reactor反应釜</strong><br>
<strong>argon氩气<br>
cooling_water冷却水</strong><br>
cobalt钴基</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MES数据采集思路]]></title>
        <id>https://spark-wz.github.io/post/mes-shu-ju-cai-ji-si-lu</id>
        <link href="https://spark-wz.github.io/post/mes-shu-ju-cai-ji-si-lu">
        </link>
        <updated>2021-06-05T07:33:33.000Z</updated>
        <content type="html"><![CDATA[<p>现代码最多可一次批量读取125个连续plc点位（例DB100 DB0-DB100 DB125），准备每次批量读取100个点位，再将读取回来的数据处理；</p>
<ul>
<li>每个子系统plc建一张设备配置表（配置表包含读取plc配置，处理plc读取数据配置、设备编号、设备名、read_group(此配置为读取plc数据时分组，相同DB块中每一百个点位为一组，其中,1-100为1，101-200为2，以此类推)）</li>
<li>每个子系统数据采集为一个定时任务</li>
</ul>
<h4 id="数据采集流程">数据采集流程</h4>
<ul>
<li>在对应子系统配置表中拿到分组后的设备配置，遍历；</li>
<li>读取每组设备的数据，处理后存入对应山海鲸bean和list；</li>
<li>将数组存入taos、更新山海经表；</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[plc思路]]></title>
        <id>https://spark-wz.github.io/post/si-lu</id>
        <link href="https://spark-wz.github.io/post/si-lu">
        </link>
        <updated>2021-05-27T14:48:47.000Z</updated>
        <content type="html"><![CDATA[<p>数据采集：equipment表中有所有设备配置、根据设备读取类型分类、读取数据分别批量插入taos；<br>
二工序plc下发流程：<br>
获取二工序所有正在运行的工艺、遍历；读取成品罐、森松搅拌罐液位；当成品罐液位高于成品罐低限、森松搅拌罐液位低于搅拌罐低限、此时符合条件，开始下发。下发时写入森松阀 开阀门指令、等待10秒后读取森松阀门状态、当状态为开启时，准备下发配料系统plc 开启产线指令，下发后等待1秒，读取配料系统plc产线状态、状态为开启时，更新产线表、任务表。</p>
<p>所有配置写死，根据产线名分别使用不同的配置<br>
所有数据存入taos、包括产线状态、森松阀门、然后工艺表中存入产线启停所需要的设备编号、根据编号批量去taos读取、读取回来后根据编号匹配</p>
<h3 id="二工序产线启动故障处理">二工序产线启动故障处理</h3>
<p>故障可能性：森松阀门开启失败、读取森松液位失败、森松液位读取失败、产线启动下发失败、读取产线状态失败、</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[navicat导出表结构]]></title>
        <id>https://spark-wz.github.io/post/navicat-dao-chu-biao-jie-gou</id>
        <link href="https://spark-wz.github.io/post/navicat-dao-chu-biao-jie-gou">
        </link>
        <updated>2021-05-22T06:44:36.000Z</updated>
        <content type="html"><![CDATA[<p>SELECT<br>
COLUMN_NAME 列名,<br>
COLUMN_TYPE 数据类型,<br>
DATA_TYPE 字段类型,<br>
CHARACTER_MAXIMUM_LENGTH 长度,<br>
IS_NULLABLE 是否为空,<br>
-- COLUMN_DEFAULT 默认值,<br>
COLUMN_COMMENT 备注<br>
FROM<br>
INFORMATION_SCHEMA. COLUMNS<br>
WHERE<br>
-- sxepp为数据库名称，到时候只需要修改成你要导出表结构的数据库即可<br>
table_schema = 'industrial_intelligence'<br>
AND -- sx_jc_car为表名，到时候换成你要导出的表的名称<br>
-- 如果不写的话，默认会查询出所有表中的数据，这样可能就分不清到底哪些字段是哪张表中的了，所以还是建议写上要导出的名名称<br>
table_name = 'cobalt'</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PLC文档]]></title>
        <id>https://spark-wz.github.io/post/plc-wen-dang</id>
        <link href="https://spark-wz.github.io/post/plc-wen-dang">
        </link>
        <updated>2021-05-16T02:00:23.000Z</updated>
        <content type="html"><![CDATA[<p><strong>准备连接</strong><br>
S7Client s7Client = new S7Client();<br>
<strong>连接参数  机器的ip,机器的机架号 ,插槽号</strong><br>
s7Client.ConnectTo(&quot;192.168.2.15&quot;, 0, 1);</p>
<h2 id="plc批量写入">PLC批量写入</h2>
<p>批量写入plc<br>
写入plc的第一条数据为byte数组中的第0位，byte数组写入位置间隔为plc各数据之间的偏移量间隔，若想间隔插入、必须在byte数据中留出与plc各数据之间的偏移量间隔</p>
<pre><code>		`
    byte[] bytes = new byte[64];
    //short对应plc中的int，每一个数据占两位，pos为数组中的位置、value为写入值
    S7.SetShortAt(bytes,0,56);
    S7.SetShortAt(bytes,2,54);
    S7.SetShortAt(bytes,4,58);
    //float对应plc中的real，每一个数据占4位，pos为数组中的位置、value为写入值
    S7.SetFloatAt(bytes,6,(float) 10.5);
    S7.SetFloatAt(bytes,10,(float) 10.5);
    S7.SetFloatAt(bytes,14,(float) 10.5);
    //bit对应plc中的bool，每一个数据占1位，pos为数组中的位置、bit为当前字节的位数，因为一个bool对应一个字节中的一位、value为写入值
    S7.SetBitAt(bytes,18,0,true);
    S7.SetShortAt(bytes,20,61);
    //参数第一个为读写区域，DB为S7.S7AreaDB=132、读写区域AO、DO 为130、读写区域AI、DI 为129
    //DBNumber第二个参数为DB号、读取区域为130、129时，第二个参数无作用
    //start第三个参数为写入数据的起始位、为写入plc第一条数据的偏移量
    //amount第四个参数为写入数据的位数、目前测定最大为22位
    //bytes第5个参数为要写入的byte数组
    int i = s7Client.WriteArea(S7.S7AreaDB, 25, 2, 22, bytes);
				`
</code></pre>
<h2 id="plc批量读取">PLC批量读取</h2>
<pre><code>			`
    S7Client s7Client = new S7Client();
    //连接参数  机器的ip,机器的机架号 ,插槽号
    s7Client.ConnectTo(&quot;192.168.2.15&quot;, 0, 1);
    System.out.println(&quot;s7Client.Connected = &quot; + s7Client.Connected);
    byte[] bytes = new byte[64];
    int i = s7Client.ReadArea(S7.S7AreaDB,25,2,22,bytes);
    System.out.println(&quot;i = &quot; + i);
    System.out.println(&quot;S7.GetShortAt(bytes,0) = &quot; + S7.GetShortAt(bytes,0));
    System.out.println(&quot;S7.GetShortAt(bytes,2) = &quot; + S7.GetShortAt(bytes,2));
    System.out.println(&quot;bytes = &quot; + S7.GetShortAt(bytes,4));
    System.out.println(&quot;S7.GetFloatAt(bytes,6) = &quot; + S7.GetFloatAt(bytes,6));
    System.out.println(&quot;S7.GetFloatAt(bytes,10) = &quot; + S7.GetFloatAt(bytes,10));
    System.out.println(&quot;S7.GetFloatAt(bytes,14) = &quot; + S7.GetFloatAt(bytes,14));
    System.out.println(&quot;S7.GetBitAt(bytes,18,0) = &quot; + S7.GetBitAt(bytes,18,0));
    System.out.println(&quot;S7.GetShortAt(bytes,20) = &quot; + S7.GetShortAt(bytes,20));
		
`
</code></pre>
]]></content>
    </entry>
</feed>