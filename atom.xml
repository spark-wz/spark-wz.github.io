<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://spark-wz.github.io</id>
    <title>Gridea</title>
    <updated>2021-03-05T05:44:38.049Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://spark-wz.github.io"/>
    <link rel="self" href="https://spark-wz.github.io/atom.xml"/>
    <logo>https://spark-wz.github.io/images/avatar.png</logo>
    <icon>https://spark-wz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[docker命令]]></title>
        <id>https://spark-wz.github.io/post/docker-ming-ling</id>
        <link href="https://spark-wz.github.io/post/docker-ming-ling">
        </link>
        <updated>2021-02-25T08:12:27.000Z</updated>
        <content type="html"><![CDATA[<p>docker pull +应用名称 下载应用镜像<br>
docker run -itd --name ubuntu-test ubuntu /bin/bash （i交互式操作、t终端、d后台运行 、/bin/bash通过shell运行）<br>
docker ps -a 查看所有运行容器<br>
docker stop、start、restart +容器id，停止、开始、重启容器<br>
docker exec -it +容器id /bin/bash 进入容器，退出时不会影响容器运行。<br>
docker run -p 80 -d nginx 启动docker中的nginx<br>
iZ2ze8vj2il5rc16bwvb6aZ</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[work]]></title>
        <id>https://spark-wz.github.io/post/work</id>
        <link href="https://spark-wz.github.io/post/work">
        </link>
        <updated>2021-02-24T09:29:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="供料配料系统">供料配料系统</h2>
<ol>
<li><strong>jeecg boot升级微服务</strong></li>
<li>taos连接池</li>
<li>读取西门子系列plc实数</li>
<li>plc控制逻辑</li>
</ol>
<h2 id="宁波资料">宁波资料</h2>
<ol>
<li>材料报审</li>
<li>开工资料</li>
<li>工程变更单</li>
<li>检验批</li>
<li>分部分项</li>
<li>电阻接地</li>
</ol>
<h2 id="年度总结">年度总结</h2>
<p>今天晚上必须写完，更新到飞书</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[引力运动场]]></title>
        <id>https://spark-wz.github.io/post/yin-li-yun-dong-chang</id>
        <link href="https://spark-wz.github.io/post/yin-li-yun-dong-chang">
        </link>
        <updated>2020-11-13T15:10:59.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><strong>登录时判断用户是否第一次登录，是，插入，否，更新用户信息（不确定头像、微信昵称是否更改过）</strong></li>
<li>根据场馆id获取场馆场地。</li>
<li>下订单的时候加一个字段  场地名</li>
<li>查询最近约战返回一条（数据库限定）</li>
<li>查询最近约战（根据订单人uuid，以及跟随约战人uuid返回用户信息）</li>
<li>预约本场就是加入约战接口，加入约战人uuid用逗号分开</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[aliyunStartService]]></title>
        <id>https://spark-wz.github.io/post/aliyunstartservice</id>
        <link href="https://spark-wz.github.io/post/aliyunstartservice">
        </link>
        <updated>2020-11-03T12:33:07.000Z</updated>
        <content type="html"><![CDATA[<p><strong>启动nginx</strong><br>
/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</p>
<p><strong>启动redis</strong><br>
cd到/usr/local/redis/bin<br>
./redis-server redis.conf</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java线程]]></title>
        <id>https://spark-wz.github.io/post/java-xian-cheng</id>
        <link href="https://spark-wz.github.io/post/java-xian-cheng">
        </link>
        <updated>2020-09-09T09:10:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="进程与线程">进程与线程</h1>
<p>一个程序至少有一个进程，一个进程至少有一个线程。<br>
线程的划分尺度小于进程，使得多进程程序的并发性高。<br>
另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>
线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>
从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。<br>
在java中，每次程序至少启用两个线程，一个是main线程，一个是垃圾回收线程，因为当使用java命令执行一个类的同时，实际上都会启用一个jvm，每一个jvm实际上就是在操作系统中启动了一个进程。</p>
<h1 id="java线程">java线程</h1>
<p>java中，线程指两件不同的事情</p>
<ol>
<li>java.lang.Thread类的一个实例</li>
<li>线程的执行</li>
</ol>
<h4 id="创建线程">创建线程</h4>
<ol>
<li>对Thread类进行派生并覆盖run方法</li>
<li>通过实现Runnable接口创建。<br>
使用java.lang.Thread类或者java.lang.Runnable接口编写代码来定义，实例化和启动新线程。<br>
一个Thread类实例只是一个对象，像Java中的任何其他对象一样，具有变量和方法，生死于堆上。<br>
Java中，每个线程都有一个调用栈，即使不在程序中创建任何新的线程，线程也在后台运行着。<br>
一个Java应用总是从main()方法开始运行，main()方法运行在一个线程内，他被称为主线程。<br>
一旦创建一个新的线程，就产生一个新的调用栈。<br>
线程总体分两类：用户线程和守候线程。<br>
当所有线程执行完毕的时候，jvm自动关闭，但是守护线程部不独立于jvm，守护线程一般由操作系统或者用户创建的。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[9.10现场任务]]></title>
        <id>https://spark-wz.github.io/post/910-xian-chang-ren-wu</id>
        <link href="https://spark-wz.github.io/post/910-xian-chang-ren-wu">
        </link>
        <updated>2020-09-08T07:15:36.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>安装ffmpeg，调试摄像头。</li>
<li>编写摄像头脚本，编写数据库配置</li>
<li>部队首页图</li>
<li>部署单机版</li>
<li>任务确认书</li>
<li>洞库分区名，油罐名</li>
<li>taos数据库问题测试</li>
</ul>
<p>汽车零发油 sqlserver未连接 - 看下数据库对不对<br>
液位，流量计真实数据未测试<br>
液位进度条<br>
单机版未部署<br>
油品，各油罐位置，数量ip<br>
3个tab改4个<br>
摄像头账号密码，布局图，ffmpeg未安装 启动摄像头脚本</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[设置服务器自启动脚本]]></title>
        <id>https://spark-wz.github.io/post/she-zhi-fu-wu-qi-zi-qi-dong-jiao-ben</id>
        <link href="https://spark-wz.github.io/post/she-zhi-fu-wu-qi-zi-qi-dong-jiao-ben">
        </link>
        <updated>2020-09-08T07:14:46.000Z</updated>
        <content type="html"><![CDATA[<p>/ 1.前往目录</p>
<p>cd /etc/rc.d/init.d</p>
<p>/2. 新建startup脚本<br>
vi startup.sh</p>
<p>/3.粘贴脚本内容 (注意替换nginx和java项目的路径）</p>
<p>!/bin/bash<br>
chkconfig: 2345 10 90<br>
descriptiom: startup service<br>
cd /usr/local/nginx/sbin<br>
./nginx<br>
service mysql start<br>
source /etc/profile<br>
nohup java -jar /data/service/tl-gasoline/tl-gasoline-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod &gt;&gt; catalina.out  2&gt;&amp;1 &amp;<br>
service firewalld stop</p>
<p>/4.增加脚本的可执行权限<br>
chmod +x /etc/rc.d/init.d/startup.sh</p>
<p>/5.添加脚本到开机自动启动项目中<br>
cd /etc/rc.d/init.d<br>
chkconfig --add startup.sh<br>
chkconfig startup.sh on<br>
————————————————</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Modbus连接池]]></title>
        <id>https://spark-wz.github.io/post/you-ku-ping-tai</id>
        <link href="https://spark-wz.github.io/post/you-ku-ping-tai">
        </link>
        <updated>2020-09-04T05:45:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="原理">原理</h3>
<p>申请好与mysql的连接，将连接放入内存中，以后每次需要连接的时候，从连接池内获取连接。</p>
<h3 id="实现">实现</h3>
<p>定义一个DataSource类，这个类负责初始化mysql Connection，以及将释放的mysql连接存储起来，使用LinkedList来作为存储的数据结构（频繁对线程池进行增加和删除）（一个线程来获取就要从池子里删除一个connection，线程运行完就要将connection加入池子）</p>
<h3 id="datasource类">DataSource类</h3>
<p><img src="https://spark-wz.github.io/post-images/1599471940689.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker]]></title>
        <id>https://spark-wz.github.io/post/docker</id>
        <link href="https://spark-wz.github.io/post/docker">
        </link>
        <updated>2020-09-01T14:57:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="安装docker源">安装Docker源</h3>
<p>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</p>
<h3 id="安装docker">安装Docker</h3>
<p>sudo yum install docker-ce docker-ce-cli containerd.io</p>
<h3 id="启动docker">启动Docker</h3>
<p>systemctl start docker</p>
<h3 id="docker使用">Docker使用</h3>
<p>sudo docker run hello-world</p>
<h3 id="创建文件夹">创建文件夹</h3>
<p>mkdir rootfs</p>
<h3 id="使用busybox镜像创建系统">使用busybox镜像创建系统</h3>
<p>docker export $(docker create busybox) -o busybox.tar</p>
<h3 id="解压">解压</h3>
<p>tar -xf busybox.tar</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[websocket]]></title>
        <id>https://spark-wz.github.io/post/websocket</id>
        <link href="https://spark-wz.github.io/post/websocket">
        </link>
        <updated>2020-07-24T07:20:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="定义">定义</h2>
<p>WebSocket是基于tcp的一种新的网络协议，它实现了浏览器与服务器之间双全工通信，允许服务器主动发信息给客户端。</p>
<h2 id="原理">原理</h2>
<p>在实现WebSocket连线过程中，需要通过浏览器发出WebSocket请求，然后服务器发出回应，这个过程通常称为握手，在WebSocket API中，只需要做一次握手，实现数据传送。</p>
<h3 id="websocket与socket区别">WebSocket与Socket区别</h3>
<h4 id="websocket">WebSocket</h4>
<p>1.WebSocket建立阶段是依赖于http协议的，握手阶段是http协议，完成之后变成WebSocket协议，完全脱离socket。<br>
2.建立通讯时，是客户端主动发起请求，服务端被动监听<br>
3.建立通讯后，变成“双全工”模式，服务端和客户端都在任何时间自由发送数据，<br>
4.交互模式不再是请求应答，完全由开发者自行设计<br>
5.通信的数据是基于“帧frame”的，可以传输文本数据，也可以直接传输二进制数据，效率高，封包、拆包、编号。</p>
<h4 id="socket">socket</h4>
<p>1.服务器监听通讯，被动提供服务，每次交互都是客户端主动发起请求，服务端被动应答。<br>
2.服务端不能被动向客户端推送数据<br>
3.通讯数据基于文本格式，二进制数据（图片等）需要转换</p>
]]></content>
    </entry>
</feed>